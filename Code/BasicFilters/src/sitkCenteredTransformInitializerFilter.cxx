/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at sitkImageFilterTemplate.cxx.in to make changes.
 */

#include "itkImage.h"
#include "itkVectorImage.h"
#include "itkLabelMap.h"
#include "itkLabelObject.h"
#include "itkNumericTraits.h"
#include "itkNumericTraitsVariableLengthVectorPixel.h"
#include "itkVectorIndexSelectionCastImageFilter.h"
#include "itkComposeImageFilter.h"

#include "sitkCenteredTransformInitializer.h"
#include "itkCenteredTransformInitializer.h"

// Additional include files
#include "sitkTransform.h"
// Done with additional include files

namespace itk {
namespace simple {

//-----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
CenteredTransformInitializer::CenteredTransformInitializer ()
{

    this->m_OperationMode = itk::simple::CenteredTransformInitializer::MOMENTS;

  this->m_MemberFactory.reset( new detail::MemberFunctionFactory<MemberFunctionType>( this ) );

  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 3 > ();
  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 2 > ();


  
}

//
// Destructor
//
CenteredTransformInitializer::~CenteredTransformInitializer ()
{

}


//
// Custom Methods
//

void CenteredTransformInitializer::MonentsOn( )
{
  this->SetOperationMode( MOMENTS );
}

void CenteredTransformInitializer::GeometryOn( )
{
  this->SetOperationMode( GEOMETRY );
}


//
// ToString
//
std::string CenteredTransformInitializer::ToString() const
{
  std::ostringstream out;
  out << "itk::simple::CenteredTransformInitializer\n";
  out << "  OperationMode: ";
  this->ToStringHelper(out, this->m_OperationMode);
  out << std::endl;


  return out.str();
}

//
// Execute
//
Image CenteredTransformInitializer::Execute ( const Image & fixedImage, const Image & movingImage, const Transform & transform, CenteredTransformInitializer::OperationModeType operationMode )
{
  this->SetOperationMode ( operationMode );

  return this->Execute ( fixedImage, movingImage, transform );
}


Image CenteredTransformInitializer::Execute ( const Image & fixedImage, const Image & movingImage, const Transform & transform )
{
  PixelIDValueEnum type = fixedImage.GetPixelID();
  unsigned int dimension = fixedImage.GetDimension();


  return this->m_MemberFactory->GetMemberFunction( type, dimension )( &fixedImage, &movingImage, &transform );
}


//-----------------------------------------------------------------------------

//
// Custom Casts
//
namespace {

}

//-----------------------------------------------------------------------------

//
// ExecuteInternal
//
template <class TImageType>
Image CenteredTransformInitializer::ExecuteInternal ( const Image * inFixedImage, const Image * inMovingImage, const Transform * inTransform )
{


  //Define output image type
  typedef float OutputImageType;



  typedef itk::CenteredTransformInitializer< itk::AffineTransform< double, TImageType::ImageDimension  >, TImageType, TImageType> FilterType;
  // Set up the ITK filter
  typename FilterType::Pointer filter = FilterType::New();


  assert( inFixedImage != NULL );
  filter->SetFixedImage( this->CastImageToITK<typename FilterType::FixedImageType>(*inFixedImage) );
  assert( inMovingImage != NULL );
  typename FilterType::MovingImageType::ConstPointer image2 = this->CastImageToITK<typename FilterType::MovingImageType>( *inMovingImage );
  filter->SetMovingImage( image2 );
  assert( inTransform != NULL );
  const typename FilterType::TransformType *itkTx = dynamic_cast<const typename FilterType::TransformType *>(inTransform->GetITKBase() );
  if ( !itkTx )
    {
    sitkExceptionMacro( "Unexpected error converting transform! Possible miss matching dimensions!" );
    }
  else { filter->SetTransform( const_cast<typename FilterType::TransformType*>(itkTx) ); }


  if (m_OperationMode == MOMENTS) { filter->MomentsOn(); } else { filter->GeometryOn(); }




  this->PreUpdate( filter.GetPointer() );



  // Run the ITK filter and return the output as a SimpleITK image
  filter->Update();



  typename FilterType::OutputImageType *itkOutImage = filter->GetOutput();
  this->FixNonZeroIndex( itkOutImage );
  return Image( this->CastITKToImage(itkOutImage) );

}

//-----------------------------------------------------------------------------




} // end namespace simple
} // end namespace itk
