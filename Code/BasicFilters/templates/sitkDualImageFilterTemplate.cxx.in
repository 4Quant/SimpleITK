/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
$(include DoNotEditWarning.cxx.in)

$(include StandardIncludes.cxx.in)
$(include AddExtraIncludes.cxx.in)

namespace itk {
namespace simple {

//-----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
$(include ConstructorSignature.cxx.in)
{
$(include ConstructorInitializeMembers.cxx.in)

  typedef ${pixel_types2}  PixelIDTypeList2;


  this->m_DualMemberFactory.reset( new detail::DualMemberFunctionFactory<MemberFunctionType>( this ) );

  this->m_DualMemberFactory->RegisterMemberFunctions< PixelIDTypeList, PixelIDTypeList2, 3 > ();
  this->m_DualMemberFactory->RegisterMemberFunctions< PixelIDTypeList, PixelIDTypeList2, 2 > ();

}

//
// ToString
//
$(include ToStringSignature.cxx.in)
{
$(include ToStringBody.cxx.in)
$(include ToStringReturn.cxx.in)
}

$(include CustomMethods.cxx.in)

//
// Execute
//$(include ExecuteWithParameters.cxx.in)
Image ${name}::Execute ( $(include ImageParameters.in) )
{
  PixelIDValueEnum type1 = image1.GetPixelID();
  unsigned int dimension = image1.GetDimension();

$(if number_of_inputs == 2 then
OUT=[[
  PixelIDValueEnum type2 = image2.GetPixelID();
  // todo need better error handling and potential type conversion
  if ( dimension != image2.GetDimension() ||
       image1.GetWidth() != image2.GetWidth() ||
       image1.GetHeight() != image2.GetHeight() ||
       image1.GetDepth() != image2.GetDepth() )
    {
      sitkExceptionMacro ( "Both images for ${name} don't match type or dimension!" );
    }]]
else
OUT=[[
  ${custom_type2}]]

end)

  return this->m_DualMemberFactory->GetMemberFunction( type1, type2, dimension )( $(for inum=1,number_of_inputs do
  if inum>1 then
    OUT=OUT .. ', '
  end
  OUT= OUT .. 'image' .. inum
                                                                          end) );
}


//-----------------------------------------------------------------------------

//
// ExecuteInternal
//
template <class TImageType, class TImageType2>
Image ${name}::DualExecuteInternal ( $(for inum=1,number_of_inputs do
 if inum>1 then
       OUT=OUT.. ', '
  end
  OUT= OUT .. 'const Image& inImage' .. inum
  end ) )
{
  // Define the input and output image types
  typedef TImageType     InputImageType;
  typedef TImageType2     InputImageType2;

  $(if output_image_type then
  OUT=[[//Define output image type
  typedef ${output_image_type} OutputImageType;]]
  elseif output_pixel_type then
  OUT=[[// Define output image type
  typedef itk::Image< ${output_pixel_type}, InputImageType::ImageDimension > OutputImageType;]]
  else
  OUT=[[typedef InputImageType OutputImageType;]]
  end)

$(include ExecuteInternalGetImagePointers.cxx.in)

$(include ExecuteInternalITKFilter.cxx.in)

$(include ExecuteInternalSetITKFilterInputs.cxx.in)
$(include ExecuteInternalUpdateAndReturn.cxx.in)
}

//-----------------------------------------------------------------------------

$(include FunctionalAPI.cxx.in)

} // end namespace simple
} // end namespace itk
